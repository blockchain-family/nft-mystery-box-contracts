.version sol 0.57.1

.macro constructor
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
GETGLOB 6
THROWIF 51
OVER
PUSHCONT {
	LDU 16
	LDU 32
	LDU 32
	LDREF
	ENDS
	CTOS
}
PUSHCONT {
	LDU 16
	LDU 32
	LDU 32
}
IFELSE
LDMSGADDR
LDU 16
LDREF
ENDS
CTOS
LDMSGADDR
LDREF
LDDICT
ENDS
ROLL 4
.loc ../contracts/modules/access/OwnableInternal.sol, 12
CALLREF {
	CALL $_transferOwnership_internal_macro$
}
.loc ../contracts/Market.sol, 63
ACCEPT
.loc ../contracts/Market.sol, 64
ROLL 6
SETGLOB 13
.loc ../contracts/Market.sol, 65
ROLL 5
SETGLOB 17
.loc ../contracts/Market.sol, 66
ROLL 4
SETGLOB 18
.loc ../contracts/Market.sol, 67
ROLL 3
SETGLOB 12
.loc ../contracts/Market.sol, 68
SETGLOB 24
.loc ../contracts/Market.sol, 69
PUSHINT 0
GETGLOB 24
PUSHINT 16
DICTUGET
NULLSWAPIFNOT
NIP
THROWIFNOT 101
.loc ../contracts/Market.sol, 70
SWAP
SETGLOB 16
.loc ../contracts/Market.sol, 71
SETGLOB 21
.loc ../contracts/Market.sol, 72
CALLREF {
	CALL $_reserve_internal_macro$
}
.loc ../contracts/Market.sol, 73
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 128
ADDCONST 2
UFITS 8
SENDRAWMSG
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro loadNftData
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 81
LDDICT
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $loadNftData_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro loadNftData_internal_macro
.loc ../contracts/modules/access/OwnableInternal.sol, 31
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
DUP
PUSHCONT {
	DROP
	CALLREF {
		CALL $owner_internal_macro$
	}
	GETGLOB 9
	SDEQ
}
IF
THROWIFNOT 100
.loc ../contracts/modules/access/OwnableInternal.sol, 32
DEPTH
ADDCONST -2
PICK
THROWIFNOT 101
.loc ../contracts/modules/access/OwnableInternal.sol, 33
PUSHINT 0
.loc ../contracts/Market.sol, 77
CALLREF {
	CALL $state_internal_macro$
}
EQUAL
THROWIFNOT 102
.loc ../contracts/Market.sol, 82
DUP
PUSHINT 32
DICTUMIN
PUSHCONT {
	NULL
	BLKPUSH 2, 0
}
IFREFELSE {
	DUP
	ROT
	LDREF
	LDREF
	LDREF
	LDREF
	ENDS
	CTOS
	LDREF
	LDREF
	LDREF
	ENDS
	TUPLE 6
}
PUSHCONT {
	PUSH S2
	ISNULL
	NOT
}
PUSHCONT {
	.loc ../contracts/Market.sol, 83
	OVER
	GETGLOB 13
	LEQ
	THROWIFNOT 103
	.loc ../contracts/Market.sol, 84
	SWAP
	GETGLOB 23
	ROT
	CALLREF {
		UNTUPLE 6
		REVERSE 6, 0
		NEWC
		STREF
		STREF
		STREF
		ROLLREV 3
		NEWC
		STREF
		STREF
		STREF
		STBREFR
	}
	ROTREV
	PUSHINT 32
	DICTUSETB
	SETGLOB 23
	.loc ../contracts/Market.sol, 0
	PUSH2 S0, S1
	PUSHINT 32
	DICTUGETNEXT
	PUSHCONT {
		NULL
		BLKPUSH 2, 0
	}
IFREFELSE {
		DUP
		ROT
		LDREF
		LDREF
		LDREF
		LDREF
		ENDS
		CTOS
		LDREF
		LDREF
		LDREF
		ENDS
		TUPLE 6
}
	BLKDROP2 1, 3
}
WHILE
BLKDROP 4
.loc ../contracts/Market.sol, 0

.macro state
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 88
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $state_internal_macro$
}
OVER
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000027df80c0e_
	STSLICER
	STU 8
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $upd_only_time_in_c4$
}
THROW 0

.globl	state_internal
.type	state_internal, @function
CALL $state_internal_macro$

.macro state_internal_macro
.loc ../contracts/Market.sol, 88
PUSHINT 0
.loc ../contracts/Market.sol, 89
NOW
GETGLOB 17
LESS
PUSHCONT {
	.loc ../contracts/Market.sol, 90
	DROP
	PUSHINT 0
	.loc ../contracts/Market.sol, 0
}
PUSHCONT {
	GETGLOB 22
	ISNULL
	NOW
	GETGLOB 18
	LESS
	GETGLOB 14
	GETGLOB 13
	LESS
	AND
	OR
	PUSHCONT {
		.loc ../contracts/Market.sol, 92
		DROP
		PUSHINT 1
		.loc ../contracts/Market.sol, 0
	}
	PUSHCONT {
		.loc ../contracts/Market.sol, 94
		DROP
		PUSHINT 2
		.loc ../contracts/Market.sol, 0
	}
	IFELSE
}
IFELSE
.loc ../contracts/Market.sol, 0

.macro nftData
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 98
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $nftData_internal_macro$
}
OVER
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000025ea740c2_
	STSLICER
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $upd_only_time_in_c4$
}
THROW 0

.macro nftData_internal_macro
.loc ../contracts/Market.sol, 98
PUSHINT 2
.loc ../contracts/Market.sol, 77
CALLREF {
	CALL $state_internal_macro$
}
EQUAL
THROWIFNOT 102
.loc ../contracts/Market.sol, 99
GETGLOB 23
.loc ../contracts/Market.sol, 0

.macro nftsOf
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 103
OVER
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDMSGADDR
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $nftsOf_internal_macro$
}
OVER
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003ca49c6ca_
	STSLICER
	SWAP
	UNPAIR
	XCHG S2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.globl	nftsOf_internal
.type	nftsOf_internal, @function
CALL $nftsOf_internal_macro$

.macro nftsOf_internal_macro
.loc ../contracts/Market.sol, 104
DUP
GETGLOB 25
PUSHINT 267
DICTGET
NULLSWAPIFNOT
NIP
PUSHCONT {
	DUP
	GETGLOB 25
	PUSHINT 267
	DICTGET
	THROWIFNOT 50
	LDU 32
	PLDDICT
	PAIR
}
PUSHCONT {
	PUSHINT 0
	NEWDICT
	PAIR
}
IFELSE
NIP
.loc ../contracts/Market.sol, 0

.globl	_reserve_internal
.type	_reserve_internal, @function
CALL $_reserve_internal_macro$

.macro _reserve_internal_macro
.loc ../contracts/Market.sol, 108
GETGLOB 19
GETGLOB 20
SUB
UFITS 128
PUSHINT 1000000000
ADD
UFITS 128
PUSHINT 0
RAWRESERVE
.loc ../contracts/Market.sol, 0

.macro buy
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 111
OVER
PUSHCONT {
	LDU 32
	LDREF
	ENDS
	CTOS
}
PUSHCONT {
	LDU 32
}
IFELSE
LDU 128
LDU 16
LDMSGADDR
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $buy_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro buy_internal_macro
.loc ../contracts/Market.sol, 112
CALLREF {
	CALL $_buy_internal_macro$
}
.loc ../contracts/Market.sol, 0

.globl	_buy_internal
.type	_buy_internal, @function
CALL $_buy_internal_macro$

.macro _buy_internal_macro
.loc ../contracts/Market.sol, 116
CALLREF {
	CALL $state_internal_macro$
}
EQINT 1
DUP
PUSHCONT {
	DROP
	DEPTH
	ADDCONST -2
	PICK
	PUSH S3
	PUSHINT 5000000000
	ADD
	UFITS 128
	GEQ
}
IF
PUSHCONT {
	.loc ../contracts/Market.sol, 117
	DUP
	CALLREF {
		CALL $nftsOf_internal_macro$
	}
	.loc ../contracts/Market.sol, 118
	DUP
	FIRST
	.loc ../contracts/Market.sol, 119
	GETGLOB 14
	.loc ../contracts/Market.sol, 120
	PUSH S5
	.loc ../contracts/Market.sol, 122
	GETGLOB 14
	PUSHCONT {
		PUSH2 S0, S6
		LEQ
	}
	PUSHCONT {
		.loc ../contracts/Market.sol, 123
		PUSH S2
		GETGLOB 24
		PUSHINT 16
		DICTUGETPREVEQ
		NULLSWAPIFNOT
		PUSHCONT {
			SWAP
			PLDU 128
			PAIR
		}
		IF
		DUP
		ISNULL
		THROWIF 63
		UNPAIR
		NIP
		.loc ../contracts/Market.sol, 124
		PUSH2 S2, S0
		GEQ
		PUSH S5
		GETGLOB 12
		LESS
		PUSH S5
		GETGLOB 13
		LESS
		AND
		AND
		PUSHCONT {
			.loc ../contracts/Market.sol, 125
			PUSH2 S2, S0
			SUB
			UFITS 128
			POP S3
			.loc ../contracts/Market.sol, 126
			PUSH S4
			INC
			POP S5
			.loc ../contracts/Market.sol, 127
			PUSH2 S5, S1
			NEWC
			STU 16
			SWAP
			UNPAIR
			OVER
			INC
			ROLLREV 3
			PUSHINT 32
			DICTUSETB
			PAIR
			POP S6
			.loc ../contracts/Market.sol, 128
			PUSH S3
			INC
			UFITS 16
			POP S4
			.loc ../contracts/Market.sol, 0
		}
		PUSHCONT {
			.loc ../contracts/Market.sol, 130
			DROP
			RETALT
			.loc ../contracts/Market.sol, 0
		}
		IFELSE
		DROP
		.loc ../contracts/Market.sol, 122
		INC
		UFITS 16
		.loc ../contracts/Market.sol, 0
	}
	WHILEBRK
	DROP
	.loc ../contracts/Market.sol, 133
	GETGLOB 14
	PUSH S2
	NEQ
	PUSHCONT {
		.loc ../contracts/Market.sol, 134
		OVER
		DEC
		UFITS 16
		GETGLOB 14
		PUSH2 S9, S6
		FALSE
		NEWC
		STSLICECONST x6_
		STI 1
		PUSHINT 3
		STZEROES
		STSLICE
		PUSHSLICE x3989680000000000000000000000000000b6d2bbe1_
		STSLICER
		STU 32
		STU 16
		STU 16
		ENDC
		PUSHINT 1
		SENDRAWMSG
		.loc ../contracts/Market.sol, 138
		PUSH S4
		GETGLOB 25
		NEWC
		PUSH S6
		UNPAIR
		XCHG S2
		STU 32
		STDICT
		ROTREV
		PUSHINT 267
		DICTSETB
		SETGLOB 25
		.loc ../contracts/Market.sol, 139
		OVER
		SETGLOB 14
		.loc ../contracts/Market.sol, 140
		PUSH2 S6, S0
		SUB
		UFITS 128
		GETGLOB 19
		ADD
		UFITS 128
		SETGLOB 19
	}
	PUSHCONT {
		.loc ../contracts/Market.sol, 142
		PUSH2 S7, S4
		FALSE
		NEWC
		STSLICECONST x6_
		STI 1
		PUSHINT 3
		STZEROES
		STSLICE
		PUSHSLICE x398968000000000000000000000000000068887783_
		STSLICER
		STU 32
		ENDC
		PUSHINT 1
		SENDRAWMSG
	}
	IFELSE
	.loc ../contracts/Market.sol, 0
	BLKDROP 4
}
PUSHCONT {
	.loc ../contracts/Market.sol, 145
	PUSH2 S3, S0
	FALSE
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	PUSHSLICE x398968000000000000000000000000000068887783_
	STSLICER
	STU 32
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
IFELSE
.loc ../contracts/Market.sol, 148
CALLREF {
	CALL $_reserve_internal_macro$
}
.loc ../contracts/Market.sol, 149
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 128
ADDCONST 2
UFITS 8
SENDRAWMSG
.loc ../contracts/Market.sol, 0
BLKDROP 3

.macro onReceiveTONsFromBridgeCallback
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 152
OVER
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDU 128
LDMSGADDR
LDREF
ENDS
CTOS
LDMSGADDR
LDREF
ENDS
CTOS
LDMSGADDR
LDU 128
LDU 128
LDU 8
LDU 128
LDREF
ENDS
CTOS
LDU 128
ROTREV
PAIR
SWAP
LDREF
ROLLREV 9
TUPLE 9
SWAP
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $onReceiveTONsFromBridgeCallback_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro onReceiveTONsFromBridgeCallback_internal_macro
.loc ../contracts/Market.sol, 153
DUP
INDEX 8
CTOS
.loc ../contracts/Market.sol, 154
DUP
SBITS
PUSHINT 176
EQUAL
PUSHCONT {
	.loc ../contracts/Market.sol, 155
	DUP
	LDU 32
	LDU 128
	LDU 16
	POP S4
	.loc ../contracts/Market.sol, 156
	PUSH S4
	SECOND
	CALLREF {
		CALL $_buy_internal_macro$
	}
}
PUSHCONT {
	.loc ../contracts/Market.sol, 158
	CALLREF {
		CALL $_reserve_internal_macro$
	}
	.loc ../contracts/Market.sol, 159
	OVER
	SECOND
	NEWC
	STSLICECONST x42_
	STSLICE
	PUSHINT 111
	STZEROES
	ENDC
	PUSHINT 128
	ADDCONST 2
	UFITS 8
	SENDRAWMSG
}
IFELSE
.loc ../contracts/Market.sol, 0
DROP2

.macro receive_macro
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 164
DEPTH
ADDCONST -2
PICK
PUSHINT 5000000000
GREATER
PUSHCONT {
	.loc ../contracts/Market.sol, 165
	PUSHINT 0
	DEPTH
	ADDCONST -2
	PICK
	PUSHINT 5000000000
	SUB
	UFITS 128
	GETGLOB 13
	GETGLOB 9
	CALLREF {
		CALL $_buy_internal_macro$
	}
}
PUSHCONT {
	.loc ../contracts/Market.sol, 167
	CALLREF {
		CALL $_reserve_internal_macro$
	}
	.loc ../contracts/Market.sol, 168
	GETGLOB 9
	NEWC
	STSLICECONST x42_
	STSLICE
	PUSHINT 111
	STZEROES
	ENDC
	PUSHINT 128
	ADDCONST 2
	UFITS 8
	SENDRAWMSG
}
IFELSE
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $c7_to_c4$
}

.macro reveal
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 179
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $reveal_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.globl	reveal_internal
.type	reveal_internal, @function
CALL $reveal_internal_macro$

.macro reveal_internal_macro
.loc ../contracts/Market.sol, 179
PUSHINT 1
.loc ../contracts/Market.sol, 77
CALLREF {
	CALL $state_internal_macro$
}
EQUAL
THROWIFNOT 102
.loc ../contracts/Market.sol, 180
NOW
GETGLOB 18
GEQ
GETGLOB 14
GETGLOB 13
EQUAL
OR
THROWIFNOT 104
.loc ../contracts/Market.sol, 181
GETGLOB 13
RAND
SETGLOB 22
.loc ../contracts/Market.sol, 182
CALLREF {
	CALL $_reserve_internal_macro$
}
.loc ../contracts/Market.sol, 183
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 128
ADDCONST 2
UFITS 8
SENDRAWMSG
.loc ../contracts/Market.sol, 0

.macro withdraw
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 186
OVER
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDU 128
LDMSGADDR
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $withdraw_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro withdraw_internal_macro
.loc ../contracts/modules/access/OwnableInternal.sol, 31
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
DUP
PUSHCONT {
	DROP
	CALLREF {
		CALL $owner_internal_macro$
	}
	GETGLOB 9
	SDEQ
}
IF
THROWIFNOT 100
.loc ../contracts/modules/access/OwnableInternal.sol, 32
DEPTH
ADDCONST -2
PICK
THROWIFNOT 101
.loc ../contracts/modules/access/OwnableInternal.sol, 33
PUSHINT 2
.loc ../contracts/Market.sol, 77
CALLREF {
	CALL $state_internal_macro$
}
EQUAL
THROWIFNOT 102
.loc ../contracts/Market.sol, 187
DUP
PARSEMSGADDR
INDEX 3
PLDU 256
THROWIFNOT 105
.loc ../contracts/Market.sol, 188
GETGLOB 20
PUSH S2
ADD
UFITS 128
GETGLOB 19
LEQ
THROWIFNOT 106
.loc ../contracts/Market.sol, 189
GETGLOB 20
ROT
ADD
UFITS 128
SETGLOB 20
.loc ../contracts/Market.sol, 190
CALLREF {
	CALL $_reserve_internal_macro$
}
.loc ../contracts/Market.sol, 191
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 128
SENDRAWMSG
.loc ../contracts/Market.sol, 0

.globl	_claimNfts_internal
.type	_claimNfts_internal, @function
CALL $_claimNfts_internal_macro$

.macro _claimNfts_internal_macro
.loc ../contracts/Market.sol, 195
DUP
CALLREF {
	CALL $nftsOf_internal_macro$
}
.loc ../contracts/Market.sol, 196
DUP
FIRST
.loc ../contracts/Market.sol, 197
DUP
GTINT 0
THROWIFNOT 107
.loc ../contracts/Market.sol, 198
PUSH S2
GETGLOB 26
PUSHINT 267
DICTGET
NULLSWAPIFNOT
NIP
THROWIF 110
.loc ../contracts/Market.sol, 199
DEPTH
ADDCONST -2
PICK
SWAP
PUSHINT 5000000000
MUL
PUSHINT 2000000000
ADD
GEQ
THROWIFNOT 109
.loc ../contracts/Market.sol, 201
SECOND
PUSHINT 0
NULL
PUSHCONT {
	PUSH2 S1, S2
	PUSHINT 32
	DICTUGET
	NULLSWAPIFNOT
	PUSHCONT {
		PLDU 16
	}
	IF
	DUP
	POP S2
	ISNULL
	NOT
}
PUSHCONT {
	.loc ../contracts/Market.sol, 202
	DUP
	GETGLOB 22
	DUP
	ISNULL
	THROWIF 63
	ADD
	UFITS 32
	GETGLOB 13
	MOD
	.loc ../contracts/Market.sol, 203
	GETGLOB 15
	INC
	UFITS 16
	SETGLOB 15
	.loc ../contracts/Market.sol, 204
	PUSH2 S4, S1
	GETGLOB 23
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	CALLREF {
		LDREF
		LDREF
		LDREF
		LDREF
		ENDS
		CTOS
		LDREF
		LDREF
		LDREF
		ENDS
		TUPLE 6
	}
	GETGLOB 16
	FALSE
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	PUSHSLICE x5012a05f200000000000000000000000000003_
	STSLICER
	ROLLREV 3
	NEWC
	STSLICECONST x1dfa3fd1
	SWAP
	UNTUPLE 6
	REVERSE 7, 0
	STREF
	STREF
	STREF
	ROLLREV 5
	NEWC
	STREF
	STREF
	STREF
	STSLICE
	STU 32
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
	.loc ../contracts/Market.sol, 0
	OVER
	INC
	POP S2
}
WHILE
BLKDROP 3
.loc ../contracts/Market.sol, 207
GETGLOB 26
NEWC
STONE
ROTREV
PUSHINT 267
DICTSETB
SETGLOB 26
.loc ../contracts/Market.sol, 208
CALLREF {
	CALL $_reserve_internal_macro$
}
.loc ../contracts/Market.sol, 209
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 128
ADDCONST 2
UFITS 8
SENDRAWMSG
.loc ../contracts/Market.sol, 0

.macro claimNfts
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 212
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $claimNfts_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro claimNfts_internal_macro
.loc ../contracts/Market.sol, 212
PUSHINT 2
.loc ../contracts/Market.sol, 77
CALLREF {
	CALL $state_internal_macro$
}
EQUAL
THROWIFNOT 102
.loc ../contracts/Market.sol, 213
GETGLOB 9
CALLREF {
	CALL $_claimNfts_internal_macro$
}
.loc ../contracts/Market.sol, 0

.macro claimNftsFor
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/Market.sol, 216
OVER
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDMSGADDR
ENDS
.loc ../contracts/Market.sol, 0
CALLREF {
	CALL $claimNftsFor_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro claimNftsFor_internal_macro
.loc ../contracts/modules/access/OwnableInternal.sol, 31
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
DUP
PUSHCONT {
	DROP
	CALLREF {
		CALL $owner_internal_macro$
	}
	GETGLOB 9
	SDEQ
}
IF
THROWIFNOT 100
.loc ../contracts/modules/access/OwnableInternal.sol, 32
DEPTH
ADDCONST -2
PICK
THROWIFNOT 101
.loc ../contracts/modules/access/OwnableInternal.sol, 33
PUSHINT 2
.loc ../contracts/Market.sol, 77
CALLREF {
	CALL $state_internal_macro$
}
EQUAL
THROWIFNOT 102
.loc ../contracts/Market.sol, 217
CALLREF {
	CALL $_claimNfts_internal_macro$
}
.loc ../contracts/Market.sol, 0

.macro owner
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/modules/access/OwnableInternal.sol, 15
ENDS
.loc ../contracts/modules/access/OwnableInternal.sol, 0
CALLREF {
	CALL $owner_internal_macro$
}
OVER
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 1
	STUR 98
	SWAP
	NEWC
	STSLICECONST xdf0bcfde
	STSLICE
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $upd_only_time_in_c4$
}
THROW 0

.globl	owner_internal
.type	owner_internal, @function
CALL $owner_internal_macro$

.macro owner_internal_macro
.loc ../contracts/modules/access/OwnableInternal.sol, 16
GETGLOB 10
.loc ../contracts/modules/access/OwnableInternal.sol, 0

.macro transferOwnership
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/modules/access/OwnableInternal.sol, 19
OVER
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDMSGADDR
ENDS
.loc ../contracts/modules/access/OwnableInternal.sol, 0
CALLREF {
	CALL $transferOwnership_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.globl	transferOwnership_internal
.type	transferOwnership_internal, @function
CALL $transferOwnership_internal_macro$

.macro transferOwnership_internal_macro
.loc ../contracts/modules/access/OwnableInternal.sol, 31
GETGLOB 9
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
DUP
PUSHCONT {
	DROP
	CALLREF {
		CALL $owner_internal_macro$
	}
	GETGLOB 9
	SDEQ
}
IF
THROWIFNOT 100
.loc ../contracts/modules/access/OwnableInternal.sol, 32
DEPTH
ADDCONST -2
PICK
THROWIFNOT 101
.loc ../contracts/modules/access/OwnableInternal.sol, 20
DUP
PARSEMSGADDR
INDEX 3
PLDU 256
THROWIFNOT 100
.loc ../contracts/modules/access/OwnableInternal.sol, 21
CALLREF {
	CALL $_transferOwnership_internal_macro$
}
.loc ../contracts/modules/access/OwnableInternal.sol, 0

.globl	_transferOwnership_internal
.type	_transferOwnership_internal, @function
CALL $_transferOwnership_internal_macro$

.macro _transferOwnership_internal_macro
.loc ../contracts/modules/access/OwnableInternal.sol, 25
GETGLOB 10
.loc ../contracts/modules/access/OwnableInternal.sol, 26
OVER
SETGLOB 10
.loc ../contracts/modules/access/OwnableInternal.sol, 27
PUSHSLICE xc0000000000000000000000001
NEWC
STSLICE
ROTREV
NEWC
STSLICECONST x6115f072
STSLICE
SWAP
NEWC
STSLICE
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
.loc ../contracts/modules/access/OwnableInternal.sol, 0

.macro c4_to_c7
PUSHROOT
CTOS
LDU 256 ; pubkey c4
LDU 64 ; pubkey timestamp c4
LDU 1 ; ctor flag
NIP
LDMSGADDR
LDU 64
LDU 16
LDU 16
LDREF
ENDS
CTOS
LDU 16
LDU 16
LDMSGADDR
LDU 32
LDU 32
LDU 128
LDU 128
LDREF
LDI 1
SWAP
PUSHCONT {
	LDU 32
}
PUSHCONT {
	NULL
	SWAP
}
IFELSE
LDDICT
LDDICT
LDREF
ENDS
CTOS
LDDICT
LDDICT
ENDS
PUSHINT 0
GETGLOBVAR
GETGLOB 1
GETGLOB 2
GETGLOB 3
GETGLOB 4
GETGLOB 5
GETGLOB 6
GETGLOB 7
GETGLOB 8
GETGLOB 9
PUSHINT 17
PUSHINT 10
BLKSWX
PUSHINT 27
TUPLEVAR
POP C7
SETGLOB 3
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS
SBITS
GTINT 1
PUSHCONT {
	PUSHINT 0
	PUSHROOT
	CTOS
	PLDDICT ; D
	PUSHINT 0
	GETGLOBVAR
	GETGLOB 1
	GETGLOB 2
	GETGLOB 3
	GETGLOB 4
	GETGLOB 5
	GETGLOB 6
	GETGLOB 7
	GETGLOB 8
	GETGLOB 9
	PUSHREFSLICE {
		.blob x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	PUSHINT 1
	PUSH S12
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 64
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	PUSHINT 0
	BLKPUSH 3, 0
	PUSHREFSLICE {
		.blob x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	PUSHINT 0
	BLKPUSH 3, 0
	PUSHREF {
	}
	NULL
	NEWDICT
	BLKPUSH 3, 0
	PUSHINT 27
	TUPLEVAR
	POP C7
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
}
IFREFELSE {
	CALL $c4_to_c7$
}

.macro c7_to_c4
PUSH C7
FALSE
PUSHINT 27
SETINDEXVARQ
PUSHINT 28
UNTUPLEVAR
DROP
PUSHINT 27
PUSHINT 0
REVX
BLKDROP 10
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STONE
STSLICE
STU 64
STU 16
STU 16
ROLLREV 13
NEWC
STU 16
STU 16
STSLICE
STU 32
STU 32
STU 128
STU 128
STREF
SWAP
DUP
ISNULL
PUSHCONT {
	DROP
	STSLICECONST 0
}
PUSHCONT {
	SWAP
	STSLICECONST 1
	STU 32
}
IFELSE
STDICT
STDICT
ROTREV
NEWC
STDICT
STDICT
STBREFR
STBREFR
ENDC
POPROOT

.macro upd_only_time_in_c4
PUSHROOT
CTOS
LDU 256
LDU 64
NIP
GETGLOB 3
ROT
NEWC
STU 256
STU 64
STSLICE
ENDC
POPROOT

.internal-alias :main_internal, 0
.internal :main_internal
PUSHROOT
CTOS
SBITS
NEQINT 1
SETGLOB 6
PUSH S2
CTOS
LDU 4 ; bounced tail
LDMSGADDR ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
OVER
SEMPTY ; isEmpty
DUP
PUSHCONT {
	DROP
	OVER
	LDUQ 32  ; [funcId] body' ok
	THROWIFNOT 60
	OVER
	EQINT 0 ; funcId body' isZero
	DUP
	PUSHCONT {
		BLKDROP2 2, 1
	}
	IF
}
IFNOT
IFJMPREF {
	CALL $receive_macro$
}
SWAP
CALLREF {
	CALL $public_function_selector$
}
THROW 60

.internal-alias :main_external, -1
.internal :main_external
PUSHROOT
CTOS
SBITS
NEQINT 1
SETGLOB 6
PUSHREFSLICE {
	.blob x8000000000000000000000000000000000000000000000000000000000000000001_
}
SETGLOB 9
OVER
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP
	HASHSU ; signatureSlice msgSlice hashMsgSlice
	SWAP
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP
	PUSHCONT {
		LDU 256 ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG S3
		SWAP
	}
	PUSHCONT {
		XCHG S2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU ; msgSlice isSigned
	THROWIFNOT 40
}
PUSHCONT {
	LDU 1 ; havePubkey msgSlice
	SWAP
	THROWIF 58
}
IFELSE
LDU 64 ; timestamp msgSlice
SWAP
CALL $replay_protection_macro$
LDU 32 ; expireAt msgSlice
SWAP
NOW ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU 32 ; funcId body
SWAP
CALLREF {
	CALL $public_function_selector$
}
THROW 60

.macro nftPerHand
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000952ad0a8
	NEWC
	STSLICE
	STU 16
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro totalCount
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
OVER
PUSHCONT {
	PUSHSLICE xc00000000000000000000000009d6afd39
	NEWC
	STSLICE
	STU 16
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro soldCount
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 14
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000e662eb5c
	NEWC
	STSLICE
	STU 16
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro mintCount
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 15
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000932cc698
	NEWC
	STSLICE
	STU 16
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro startTime
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 17
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000fcb81570
	NEWC
	STSLICE
	STU 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro revealDate
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 18
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000fc72c000
	NEWC
	STSLICE
	STU 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro totalRaised
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 19
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000a6c9600b
	NEWC
	STSLICE
	STU 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro totalWithdraw
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 20
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000fe61ce7d
	NEWC
	STSLICE
	STU 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro provenanceHash
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 21
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000ee94d9b2
	NEWC
	STSLICE
	STREF
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro priceRule
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 24
OVER
PUSHCONT {
	PUSHSLICE xc00000000000000000000000009c84d0fb
	NEWC
	STSLICE
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro soldNfts
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 25
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000d34fb8e8
	NEWC
	STSLICE
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro claimNft
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 26
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000d6797285
	NEWC
	STSLICE
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro public_function_selector
DUP
PUSHINT 1594609630
LEQ
IFJMPREF {
	DUP
	PUSHINT 321701528
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 171622605
		EQUAL
		IFJMPREF {
			CALL $withdraw$
		}
		DUP
		PUSHINT 224849340
		EQUAL
		IFJMPREF {
			CALL $claimNftsFor$
		}
		DUP
		PUSHINT 235197086
		EQUAL
		IFJMPREF {
			CALL $transferOwnership$
		}
		DUP
		PUSHINT 321701528
		EQUAL
		IFJMPREF {
			CALL $mintCount$
		}
	}
	DUP
	PUSHINT 478466299
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 355127464
		EQUAL
		IFJMPREF {
			CALL $nftPerHand$
		}
		DUP
		PUSHINT 374504882
		EQUAL
		IFJMPREF {
			CALL $loadNftData$
		}
		DUP
		PUSHINT 397004848
		EQUAL
		IFJMPREF {
			CALL $nftData$
		}
		DUP
		PUSHINT 478466299
		EQUAL
		IFJMPREF {
			CALL $priceRule$
		}
	}
	DUP
	PUSHINT 795482752
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 493550905
		EQUAL
		IFJMPREF {
			CALL $totalCount$
		}
		DUP
		PUSHINT 528352003
		EQUAL
		IFJMPREF {
			CALL $state$
		}
		DUP
		PUSHINT 650731531
		EQUAL
		IFJMPREF {
			CALL $totalRaised$
		}
		DUP
		PUSHINT 795482752
		EQUAL
		IFJMPREF {
			CALL $onReceiveTONsFromBridgeCallback$
		}
	}
	DUP
	PUSHINT 1594609630
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 902712488
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
		DUP
		PUSHINT 1397733608
		EQUAL
		IFJMPREF {
			CALL $soldNfts$
		}
		DUP
		PUSHINT 1450799749
		EQUAL
		IFJMPREF {
			CALL $claimNft$
		}
		DUP
		PUSHINT 1594609630
		EQUAL
		IFJMPREF {
			CALL $owner$
		}
	}
}
DUP
PUSHINT 2138279394
LEQ
IFJMPREF {
	DUP
	PUSHINT 1922199986
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 1607564977
		EQUAL
		IFJMPREF {
			CALL $reveal$
		}
		DUP
		PUSHINT 1717758812
		EQUAL
		IFJMPREF {
			CALL $soldCount$
		}
		DUP
		PUSHINT 1855248818
		EQUAL
		IFJMPREF {
			CALL $provenanceHash$
		}
		DUP
		PUSHINT 1922199986
		EQUAL
		IFJMPREF {
			CALL $nftsOf$
		}
	}
	DUP
	PUSHINT 2120339069
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 1926790423
		EQUAL
		IFJMPREF {
			CALL $buy$
		}
		DUP
		PUSHINT 2087895040
		EQUAL
		IFJMPREF {
			CALL $revealDate$
		}
		DUP
		PUSHINT 2092438896
		EQUAL
		IFJMPREF {
			CALL $startTime$
		}
		DUP
		PUSHINT 2120339069
		EQUAL
		IFJMPREF {
			CALL $totalWithdraw$
		}
	}
	DUP
	PUSHINT 2138279394
	EQUAL
	IFJMPREF {
		CALL $claimNfts$
	}
}

